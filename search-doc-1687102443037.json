[{"title":"Session","type":0,"sectionRef":"#","url":"/rbx-persist/api/Session","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Session","url":"/rbx-persist/api/Session#properties","content":" "},{"title":"key​","type":1,"pageTitle":"Session","url":"/rbx-persist/api/Session#key","content":"&lt;/&gt; Session.key: TKey The key  "},{"title":"keyInfo​","type":1,"pageTitle":"Session","url":"/rbx-persist/api/Session#keyInfo","content":"&lt;/&gt; Session.keyInfo: DataStoreKeyInfo  The DataStoreKeyInfo  "},{"title":"data​","type":1,"pageTitle":"Session","url":"/rbx-persist/api/Session#data","content":"&lt;/&gt; Session.data: TData The data  "},{"title":"isReleased​","type":1,"pageTitle":"Session","url":"/rbx-persist/api/Session#isReleased","content":"&lt;/&gt; Session.isReleased: boolean Whether or not the session has been released.  "},{"title":"isReleasing​","type":1,"pageTitle":"Session","url":"/rbx-persist/api/Session#isReleasing","content":"&lt;/&gt; Session.isReleasing: boolean Whether or not the session is currently being released.  "},{"title":"store​","type":1,"pageTitle":"Session","url":"/rbx-persist/api/Session#store","content":"&lt;/&gt; Session.store: Store The store  "},{"title":"released​","type":1,"pageTitle":"Session","url":"/rbx-persist/api/Session#released","content":"Signal &lt;/&gt; Session.released: Signal&lt;boolean&gt; Fired whenever the session is released. The first parameter is a boolean which is true if the data saved, and false if the data could not be saved, this could be because the session was stolen by a different server. session.released:Connect(function(didSave) print(`Session released! didSave: {didSave}`) end)  "},{"title":"Functions​","type":1,"pageTitle":"Session","url":"/rbx-persist/api/Session#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Session","url":"/rbx-persist/api/Session#new","content":"&lt;/&gt; Session.new( store: Store&lt;TKey,TData&gt;, key: TKey, data: TData, keyInfo: DataStoreKeyInfo ) → Session&lt;TKey,TData&gt; Creates a session with the given key and data note You're probably looking for Store:load  "},{"title":"update​","type":1,"pageTitle":"Session","url":"/rbx-persist/api/Session#update","content":"&lt;/&gt; Session:update() → Promise&lt;()&gt; Updates the session, saving all data and updating theSession.data and Session.keyInfo properties. This will also release the session if a different server is requesting a release. This will also stop the autosave in the current autosave cycle.  "},{"title":"release​","type":1,"pageTitle":"Session","url":"/rbx-persist/api/Session#release","content":"&lt;/&gt; Session:release() → Promise&lt;()&gt; Releases this session. "},{"title":"Store","type":0,"sectionRef":"#","url":"/rbx-persist/api/Store","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Store","url":"/rbx-persist/api/Store#types","content":" "},{"title":"StoreOptions<TKey, TData>​","type":1,"pageTitle":"Store","url":"/rbx-persist/api/Store#StoreOptions<TKey, TData>","content":"&lt;/&gt; interface StoreOptions&lt;TKey, TData&gt; { dataStore: GlobalDataStore? -- The GlobalDataStore to use, defaults to the data store with the name of the store lockId: string?-- The ID to use for locking, this should be unique per server, defaults to Store.defaultLockId key: ((key: TKey) → string)?-- A function that takes a key and returns a string key for the data store, this is not needed if the key is a string data: (key: TKey) → TData-- A function that takes a key and returns the data to store in the data store default: (key: TKey) → TData-- A function that takes a key and returns the default data metadata: ((key: TKey) → {[any]: any}?)?-- A function that takes a key and returns the metadata userIds: ((key: TKey) → {number}?)?-- A function that takes a key and returns an array of user ids associated with the key releaseSessionsOnClose: boolean?-- Whether or not to release all sessions when the server closes, defaults to true autosaveSeconds: number?-- How many seconds between autosave cycles, set to -1 to disable autosaves, defaults to 30 } The options for the Store "},{"title":"Properties​","type":1,"pageTitle":"Store","url":"/rbx-persist/api/Store#properties","content":" "},{"title":"defaultLockId​","type":1,"pageTitle":"Store","url":"/rbx-persist/api/Store#defaultLockId","content":"static &lt;/&gt; Store.defaultLockId: string The default Store.lockId. This defaults to a random GUID such as ff97f92b48a5472d96463ecf64c32866.  "},{"title":"datastore​","type":1,"pageTitle":"Store","url":"/rbx-persist/api/Store#datastore","content":"&lt;/&gt; Store.datastore: GlobalDataStore  The underlying data store used.  "},{"title":"lockId​","type":1,"pageTitle":"Store","url":"/rbx-persist/api/Store#lockId","content":"&lt;/&gt; Store.lockId: string A string that should be unique per server, this will be used for session locking. This defaults to Store.defaultLockId.  "},{"title":"name​","type":1,"pageTitle":"Store","url":"/rbx-persist/api/Store#name","content":"&lt;/&gt; Store.name: string The name of the store.  "},{"title":"sessions​","type":1,"pageTitle":"Store","url":"/rbx-persist/api/Store#sessions","content":"&lt;/&gt; Store.sessions: { [string]: Session&lt;TKey, TData&gt; } The sessions that are loaded. The key is the string key of the session.  "},{"title":"sessionReleased​","type":1,"pageTitle":"Store","url":"/rbx-persist/api/Store#sessionReleased","content":"Signal &lt;/&gt; Store.sessionReleased: Signal&lt;Session&lt;TKey,TData&gt;,boolean&gt; Fired whenever a session in the store has been released. The Session that released is given as first parameter. The second parameter is a boolean containing whether the data was saved or not (see Session.released). store.sessionReleased:Connect(function(session, didSave) print(`Session &quot;{session.keyStr}&quot; has been released! didSave: {didSave}`) end)  "},{"title":"Functions​","type":1,"pageTitle":"Store","url":"/rbx-persist/api/Store#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Store","url":"/rbx-persist/api/Store#new","content":"&lt;/&gt; Store.new( name: string,-- The name of the store options: StoreOptions&lt;TKey,TData&gt;-- Options for the store ) → Store&lt;TKey,TData&gt; Creates a store with the given name.  "},{"title":"getKey​","type":1,"pageTitle":"Store","url":"/rbx-persist/api/Store#getKey","content":"&lt;/&gt; Store:getKey(key: TKey) → string Gets the string key used in the datastore.  "},{"title":"getData​","type":1,"pageTitle":"Store","url":"/rbx-persist/api/Store#getData","content":"&lt;/&gt; Store:getData(key: TKey) → TData Gets the data to store in the datastore.  "},{"title":"getDefault​","type":1,"pageTitle":"Store","url":"/rbx-persist/api/Store#getDefault","content":"&lt;/&gt; Store:getDefault(key: TKey) → TData Gets the default data to store in the datastore.  "},{"title":"getMetadata​","type":1,"pageTitle":"Store","url":"/rbx-persist/api/Store#getMetadata","content":"&lt;/&gt; Store:getMetadata(key: TKey) → {[any]: any}? Gets the metadata to store in the datastore.  "},{"title":"getUserIds​","type":1,"pageTitle":"Store","url":"/rbx-persist/api/Store#getUserIds","content":"&lt;/&gt; Store:getUserIds(key: TKey) → {number}? Gets the user ids to store in the datastore.  "},{"title":"getSession​","type":1,"pageTitle":"Store","url":"/rbx-persist/api/Store#getSession","content":"&lt;/&gt; Store:getSession(key: TKey) → Session&lt;TKey,TData&gt;? Gets an existing session using the key.  "},{"title":"load​","type":1,"pageTitle":"Store","url":"/rbx-persist/api/Store#load","content":"&lt;/&gt; Store:load( key: TKey,-- The key to load onSessionLocked: (&quot;requestRelease&quot; | &quot;steal&quot;)?,-- What to do if the session is locked default: TData?-- The default value to use, overwrites [StoreOptions.default] ) → Promise&lt;Session&lt;TData,TKey&gt;&gt; Attempts to load the session with the given key. The onSessionLocked parameter specifies what to do if the session is locked: &quot;requestRelease&quot;: This will repeatedly try to load the session and also tells the server that locked the session to release the session, saving all the data and removing the lock. &quot;steal&quot;: This will steal the lock, overwriting the existing lock. Data Loss Using &quot;steal&quot; might cause data loss because the other server has no chance to save the data! "},{"title":"Intro","type":0,"sectionRef":"#","url":"/rbx-persist/docs/intro","content":"","keywords":""},{"title":"Features​","type":1,"pageTitle":"Intro","url":"/rbx-persist/docs/intro#features","content":"Easy to use API.Session locking helps prevent data loss by not allowing multiple servers to write to the same data. "},{"title":"Prior Art​","type":1,"pageTitle":"Intro","url":"/rbx-persist/docs/intro#prior-art","content":"ProfileService "},{"title":"Persist","type":0,"sectionRef":"#","url":"/rbx-persist/api/Persist","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Persist","url":"/rbx-persist/api/Persist#types","content":" "},{"title":"LogLevel​","type":1,"pageTitle":"Persist","url":"/rbx-persist/api/Persist#LogLevel","content":"Enum &lt;/&gt; interface LogLevel { None: 0 Warn: 1 Info: 2 Debug: 3 } See Persist.setLogLevel "},{"title":"Properties​","type":1,"pageTitle":"Persist","url":"/rbx-persist/api/Persist#properties","content":" "},{"title":"Store​","type":1,"pageTitle":"Persist","url":"/rbx-persist/api/Persist#Store","content":"&lt;/&gt; Persist.Store: Store   "},{"title":"Session​","type":1,"pageTitle":"Persist","url":"/rbx-persist/api/Persist#Session","content":"&lt;/&gt; Persist.Session: Session  "},{"title":"Functions​","type":1,"pageTitle":"Persist","url":"/rbx-persist/api/Persist#functions","content":" "},{"title":"setLogLevel​","type":1,"pageTitle":"Persist","url":"/rbx-persist/api/Persist#setLogLevel","content":"&lt;/&gt; Persist.setLogLevel(logLevel: LogLevel) → () Changes the log level, the log level defaults to Persist.LogLevel.Warn. Persist.setLogLevel(Persist.LogLevel.Info)  "},{"title":"Session Locking","type":0,"sectionRef":"#","url":"/rbx-persist/docs/session-locking","content":"Session Locking TODO","keywords":""},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/rbx-persist/docs/getting-started","content":"","keywords":""},{"title":"Example Game​","type":1,"pageTitle":"Getting Started","url":"/rbx-persist/docs/getting-started#example-game","content":"Here is an uncopylocked example game using Persist:https://www.roblox.com/games/13789071125/Persist-Example-Game "},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/rbx-persist/docs/getting-started#installation","content":""},{"title":"Roblox Studio​","type":1,"pageTitle":"Getting Started","url":"/rbx-persist/docs/getting-started#roblox-studio","content":"If you're using Roblox Studio, you can install Persist by downloading the .rbxm file fromthe latest release and then insert it into ServerScriptService. "},{"title":"Rojo/Wally​","type":1,"pageTitle":"Getting Started","url":"/rbx-persist/docs/getting-started#rojowally","content":"If you're using Wally and Rojo, you can install Persist by adding the following line to yourwally.toml: [dependencies] Persist = &quot;lukadev-0/persist@0.1.0&quot;  "},{"title":"Basic Usage​","type":1,"pageTitle":"Getting Started","url":"/rbx-persist/docs/getting-started#basic-usage","content":"Lets create a simple script that will put the data into leaderstats. First, we must get the Players service and require the Persist module: local Players = game:GetService(&quot;Players&quot;) local Persist = require(path.to.persist)  Then, we must create a store, the store will allow us to load the data: local store = Persist.Store.new(&quot;PlayerData&quot;, { -- ... })  Persist allows anything to be a &quot;key&quot;, a key is a unique identifier for our data. In this case, we want the player to be the key, however, the key must be converted into a string in order to work with datastores, so we must tell Persist how to convert the key (a Player) into a string key. This is done by passing a key function, this function takes in a key, which is a player in this case, and returns a string We're going to make the key Player_ followed by the user id of the player: local store = Persist.Store.new(&quot;PlayerData&quot;, { key = function(player: Player) return `Player_{player.UserId}` end, })  Next, we need to add a data function, this will take the player and return the data that needs to be saved. We're going to get our data from the leaderstats: local store = Persist.Store.new(&quot;PlayerData&quot;, { key = --[[ ... ]], data = function(player: Player) return { money = player.leaderstats.Money.Value, } end, })  Next, we need to add a default function, this will return the default data that the player should have. local store = Persist.Store.new(&quot;PlayerData&quot;, { key = --[[ ... ]], data = --[[ ... ]], default = function() return { money = 0, } end, })  Next, we'll add a userIds function, this function will return the user ids associated with the key. Here, we only have one user id, but for more complicated stuff, such as a &quot;groups&quot; system you might have multiple ids. local store = Persist.Store.new(&quot;PlayerData&quot;, { key = --[[ ... ]], data = --[[ ... ]], default = --[[ ... ]], userIds = function(player: Player) return { player.UserId } end, })  Now that we have our store, we need to implement the logic that actually loads and saves the data. We need to load the player's data whenever a player joins: Players.PlayerAdded:Connect(function(player) store:load(player) end)  store:load() returns a Promise, so we need to use :andThento get the resolved value. Players.PlayerAdded:Connect(function(player) store:load(player) :andThen(function(session) -- The player might've left before the session finished loading if not player:IsDescendantOf(Players) then return session:release() end end) end)  We added a check to see if the player is still in the game after the session finished loading, we release the session if they left, otherwise that player's data cannot be loaded for 30 minutes. Next, we're going to listen if the session is released and then kick the player if it did, this is because once a session is released the server can't save their data anymore. Players.PlayerAdded:Connect(function(player) store:load(player) :andThen(function(session) -- ... session.released:Connect(function() player:Kick(&quot;Session was released&quot;) end) end) end)  Now, we can create the leaderstats using the data in the session. Players.PlayerAdded:Connect(function(player) store:load(player) :andThen(function(session) -- ... local money = Instance.new(&quot;NumberValue&quot;) money.Value = session.data.money money.Name = &quot;Money&quot; money.Parent = leaderstats leaderstats.Parent = player end) end)  We also need to catch and handle any errors that come up, we will kick the player and warn the error. Players.PlayerAdded:Connect(function(player) store:load(player) :andThen(--[[ ... ]]) :catch(function(err) warn(err) player:Kick(&quot;Data failed to load&quot;) end) end)  Then, when the player leaves, we must release the session. Players.PlayerRemoving:Connect(function(player) local session = store:getSession(player) if session then session:release() end end)  And that's it! The leaderstats should now save. "},{"title":"Finished Script​","type":1,"pageTitle":"Getting Started","url":"/rbx-persist/docs/getting-started#finished-script","content":"Your whole script should look like this: local Players = game:GetService(&quot;Players&quot;) local Persist = require(path.to.persist) local store = Persist.Store.new(&quot;PlayerData&quot;, { key = function(player: Player) return `Player_{player.UserId}` end, data = function(player: Player) return { money = player.leaderstats.Money.Value, } end, default = function() return { money = 0, } end, userIds = function(player: Player) return { player.UserId } end, }) Players.PlayerAdded:Connect(function(player) store:load(player) :andThen(function(session) -- The player might've left before the session finished loading if not player:IsDescendantOf(Players) then return session:release() end session.released:Connect(function() player:Kick(&quot;Session was released&quot;) end) local leaderstats = Instance.new(&quot;Folder&quot;) leaderstats.Name = &quot;leaderstats&quot; local money = Instance.new(&quot;NumberValue&quot;) money.Value = session.data.money money.Name = &quot;Money&quot; money.Parent = leaderstats leaderstats.Parent = player end) :catch(function(err) warn(err) player:Kick(&quot;Data failed to load&quot;) end) end) Players.PlayerRemoving:Connect(function(player) local session = store:getSession(player) if session then session:release() end end)  "}]